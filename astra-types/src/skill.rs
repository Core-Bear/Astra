use astra_derive::{Astra, AstraBook};
use astra_formats::indexmap::IndexMap;
use astra_formats::Sheet;

#[derive(AstraBook)]
pub struct SkillBook {
    pub skills: Sheet<IndexMap<String, Skill>>,
}

#[derive(Astra, Debug, Default, Clone)]
pub struct Skill {
    #[astra(key = "@Out")]
    pub out: String,
    #[astra(key = "@Sid", id)]
    pub sid: String,
    #[astra(key = "@Name")]
    pub name: String,
    #[astra(key = "@Help")]
    pub help: String,
    #[astra(key = "@CommandName")]
    pub command_name: String,
    #[astra(key = "@CommandHelp")]
    pub command_help: String,
    #[astra(key = "@CommandWarning")]
    pub command_warning: String,
    #[astra(key = "@RootCommandSid")]
    pub root_command_sid: String,
    #[astra(key = "@IconKind")]
    pub icon_kind: i8,
    #[astra(key = "@IconLabel")]
    pub icon_label: String,
    #[astra(key = "@IconBmap")]
    pub icon_bmap: String,
    #[astra(key = "@Priority")]
    pub priority: u8,
    #[astra(key = "@Layer")]
    pub layer: i32,
    #[astra(key = "@Order")]
    pub order: i8,
    #[astra(key = "@Cycle")]
    pub cycle: i8,
    #[astra(key = "@Life")]
    pub life: u8,
    #[astra(key = "@Timing")]
    pub timing: i8,
    #[astra(key = "@Target")]
    pub target: i8,
    #[astra(key = "@Frequency")]
    pub frequency: i8,
    #[astra(key = "@Stand")]
    pub stand: i8,
    #[astra(key = "@Action")]
    pub action: i8,
    #[astra(key = "@Condition")]
    pub condition: String,
    #[astra(key = "@ActNames")]
    pub act_names: Vec<String>,
    #[astra(key = "@ActOperations")]
    pub act_operations: Vec<String>,
    #[astra(key = "@ActValues")]
    pub act_values: Vec<String>,
    #[astra(key = "@AroundCenter")]
    pub around_center: i8,
    #[astra(key = "@AroundTarget")]
    pub around_target: i8,
    #[astra(key = "@AroundCondition")]
    pub around_condition: String,
    #[astra(key = "@AroundName")]
    pub around_name: String,
    #[astra(key = "@AroundOperation")]
    pub around_operation: String,
    #[astra(key = "@AroundValue")]
    pub around_value: String,
    #[astra(key = "@GiveTarget")]
    pub give_target: i8,
    #[astra(key = "@GiveCondition")]
    pub give_condition: String,
    #[astra(key = "@GiveSids")]
    pub give_sids: Vec<String>,
    #[astra(key = "@RemoveSids")]
    pub remove_sids: Vec<String>,
    #[astra(key = "@SyncConditions")]
    pub sync_conditions: Vec<String>,
    #[astra(key = "@SyncSids")]
    pub sync_sids: Vec<String>,
    #[astra(key = "@RebirthSid")]
    pub rebirth_sid: String,
    #[astra(key = "@EngageSid")]
    pub engage_sid: String,
    #[astra(key = "@ChangeSids")]
    pub change_sids: Vec<String>,
    #[astra(key = "@CooperationSkill")]
    pub cooperation_skill: String,
    #[astra(key = "@HorseSkill")]
    pub horse_skill: String,
    #[astra(key = "@CovertSkill")]
    pub covert_skill: String,
    #[astra(key = "@HeavySkill")]
    pub heavy_skill: String,
    #[astra(key = "@FlySkill")]
    pub fly_skill: String,
    #[astra(key = "@MagicSkill")]
    pub magic_skill: String,
    #[astra(key = "@PranaSkill")]
    pub prana_skill: String,
    #[astra(key = "@DragonSkill")]
    pub dragon_skill: String,
    #[astra(key = "@AttackRange")]
    pub attack_range: String,
    #[astra(key = "@OverlapRange")]
    pub overlap_range: String,
    #[astra(key = "@OverlapTerrain")]
    pub overlap_terrain: String,
    #[astra(key = "@ZocRange")]
    pub zoc_range: String,
    #[astra(key = "@ZocType")]
    pub zoc_type: i8,
    #[astra(key = "@Work")]
    pub work: i8,
    #[astra(key = "@WorkOperation")]
    pub work_operation: String,
    #[astra(key = "@WorkValue")]
    pub work_value: f32,
    #[astra(key = "@Power")]
    pub power: i8,
    #[astra(key = "@Rewarp")]
    pub rewarp: u8,
    #[astra(key = "@Removable")]
    pub removable: u8,
    #[astra(key = "@VisionCount")]
    pub vision_count: u8,
    #[astra(key = "@Cost")]
    pub cost: u8,
    #[astra(key = "@MoveSelf")]
    pub move_self: i8,
    #[astra(key = "@MoveTarget")]
    pub move_target: i8,
    #[astra(key = "@RangeTarget")]
    pub range_target: i8,
    #[astra(key = "@RangeI")]
    pub range_i: u8,
    #[astra(key = "@RangeO")]
    pub range_o: u8,
    #[astra(key = "@RangeAdd")]
    pub range_add: u8,
    #[astra(key = "@RangeExtend")]
    pub range_extend: u8,
    #[astra(key = "@Flag")]
    pub flag: u64,
    #[astra(key = "@Efficacy")]
    pub efficacy: i32,
    #[astra(key = "@EfficacyValue")]
    pub efficacy_value: u8,
    #[astra(key = "@EfficacyIgnore")]
    pub efficacy_ignore: i32,
    #[astra(key = "@BadState")]
    pub bad_state: i32,
    #[astra(key = "@BadIgnore")]
    pub bad_ignore: i32,
    #[astra(key = "@WeaponProhibit")]
    pub weapon_prohibit: i32,
    #[astra(key = "@EnhanceLevel")]
    pub enhance_level: i8,
    #[astra(key = "@EnhanceValue.Hp")]
    pub enhance_value_hp: i8,
    #[astra(key = "@EnhanceValue.Str")]
    pub enhance_value_str: i8,
    #[astra(key = "@EnhanceValue.Tech")]
    pub enhance_value_tech: i8,
    #[astra(key = "@EnhanceValue.Quick")]
    pub enhance_value_quick: i8,
    #[astra(key = "@EnhanceValue.Luck")]
    pub enhance_value_luck: i8,
    #[astra(key = "@EnhanceValue.Def")]
    pub enhance_value_def: i8,
    #[astra(key = "@EnhanceValue.Magic")]
    pub enhance_value_magic: i8,
    #[astra(key = "@EnhanceValue.Mdef")]
    pub enhance_value_mdef: i8,
    #[astra(key = "@EnhanceValue.Phys")]
    pub enhance_value_phys: i8,
    #[astra(key = "@EnhanceValue.Move")]
    pub enhance_value_move: i8,
    #[astra(key = "@WeaponLevel.None")]
    pub weapon_level_none: i8,
    #[astra(key = "@WeaponLevel.Sword")]
    pub weapon_level_sword: i8,
    #[astra(key = "@WeaponLevel.Lance")]
    pub weapon_level_lance: i8,
    #[astra(key = "@WeaponLevel.Axe")]
    pub weapon_level_axe: i8,
    #[astra(key = "@WeaponLevel.Bow")]
    pub weapon_level_bow: i8,
    #[astra(key = "@WeaponLevel.Dagger")]
    pub weapon_level_dagger: i8,
    #[astra(key = "@WeaponLevel.Magic")]
    pub weapon_level_magic: i8,
    #[astra(key = "@WeaponLevel.Rod")]
    pub weapon_level_rod: i8,
    #[astra(key = "@WeaponLevel.Fist")]
    pub weapon_level_fist: i8,
    #[astra(key = "@WeaponLevel.Special")]
    pub weapon_level_special: i8,
    #[astra(key = "@EquipIids")]
    pub equip_iids: Vec<String>,
    #[astra(key = "@Effect")]
    pub effect: String,
    #[astra(key = "@InheritanceCost")]
    pub inheritance_cost: u16,
    #[astra(key = "@InheritanceSort")]
    pub inheritance_sort: u16,
}
